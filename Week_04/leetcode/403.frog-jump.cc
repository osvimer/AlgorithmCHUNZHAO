// 一只青蛙想要过河。假定河流被等分为 x 个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 
// 青蛙可以跳上石头，但是不可以跳入水中。
//
// 给定石子的位置列表（用单元格序号升序表示），请判定青蛙能否成功过河（即能否在最后一步跳至最后一个石子上）。
// 开始时，青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。
//
// 如果青蛙上一步跳跃了 K 个单位，那么它接下来的跳跃距离只能选择为 k-1, k, 或 K+1 个单位。
// 另请注意，青蛙只能向前方（终点的方向）跳跃。
//
// 请注意：
//   1. 石子的数量 ≥ 2 且 < 1100；
//   2. 每一个石子的位置序号都是一个非负整数，且其 < 231；
//   3. 第一个石子的位置永远是0。
//
// 示例1:
//   [0,1,3,5,6,8,12,17]
//
//   总共有8个石子。
//   第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,
//   第三个石子在序号为3的单元格的位置， 以此定义整个数组...
//   最后一个石子处于序号为17的单元格的位置。
//  
//   返回 true。即青蛙可以成功过河，按照如下方案跳跃： 
//   跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 
//   跳2个单位到第4块石子, 然后跳3个单位到第6块石子, 
//   跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。
//  
// 链接：https://leetcode-cn.com/problems/frog-jump

// 动态规划
// 子问题:    第 i 个石子是否可达
// 状态空间:  dp[i][j] 表示最后一步跳跃 j 个单位是否可达第 i 个石子
//            i 为石头的序号（从 0 开始）; j 为青蛙上一步跳跃的单位长度
// 状态转移方程: 
//   dp[i][j] = dp[j][step-1] || dp[j][step] || dp[j][step+1]
//   其中： step = stones[i] - stones[j]; (0 <= j < i)
class Solution {
public:
    bool canCross(vector<int>& stones) {
        int max_steps = stones.size(); // 从 1 步开始累加
        vector<vector<bool>> dp(stones.size(), vector<bool>(max_steps, false));
        dp[0][0] = 1; // 限定第一步最多只能跳跃一个单位
        for (int i = 1; i < stones.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                int step = stones[i] - stones[j];
                if (step <= 0 || step >= max_steps) continue;
                // 注意数组访问越界
                if (dp[j][step-1] || dp[j][step] || (step+1 < max_steps && dp[j][step+1])) {
                    dp[i][step] = true;
                }
            }
        }
        for (int i = 0; i < max_steps; ++i) {
            if (dp[stones.size() - 1][i]) {
                return true;
            }
        }
        return false;
    }
};
